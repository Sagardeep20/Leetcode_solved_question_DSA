
class Solution {
  public:
    void heapify(vector<int>& temp , int i,int sizeRange){
        int largest = i;
        int left = 2*i+1;
        int right = 2*i+2;
        
        if(left<=sizeRange && temp[largest] < temp[left]){
            largest = left;
        }
        if(right<=sizeRange && temp[largest] < temp[right]){
            largest = right;
        }
        
        if(i != largest){
            swap(temp[i] , temp[largest]);
            heapify(temp , largest , sizeRange);
        }
    }
    vector<int> mergeHeaps(vector<int> &a, vector<int> &b, int n, int m) {
        // your code here
        vector<int> temp;
        for(int i=0;i<a.size();i++){
            temp.push_back(a[i]);
        }
        for(int i=0;i<b.size();i++){
            temp.push_back(b[i]);
        }
        int size = temp.size();
        for(int i=size/2 - 1;i>=0;i--){
            heapify(temp , i , size-1); 
            // size-1is the range where i
            //can go to find left by 2*i+1 and right by 2*i+2
        }
        return temp;
    }
};
