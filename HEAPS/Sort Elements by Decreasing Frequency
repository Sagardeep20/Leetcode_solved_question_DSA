class Solution {
  public:
    // Complete this function
    // Function to sort the array according to frequency of elements.
    vector<int> sortByFreq(vector<int>& arr) {
        // Your code here
        unordered_map<int,int> mpp;
        for(int i=0;i<arr.size();i++){
            mpp[arr[i]]++;
        }
        
        
        auto myComparator = [](const pair<int,int> &a ,const pair<int,int>& b){
            if(a.first == b.first){
                return a.second>b.second;
            }
            return a.first<b.first;
        };
        using FreeqPair = pair<int,int>;
        
        priority_queue<FreeqPair , vector<FreeqPair> , decltype(myComparator)> maxHeap(myComparator);
        
        for(auto &it:mpp){
            maxHeap.push({it.second , it.first});
        }
        vector<int> ans;
        while(maxHeap.size() != 0){
            int freeq = maxHeap.top().first;
            int el = maxHeap.top().second;
            
            for(int i=0;i<freeq;i++){
                ans.push_back(el);
            }
            
            maxHeap.pop();
        }
        
        return ans;
    }
};


GFG-https://www.geeksforgeeks.org/problems/sorting-elements-of-an-array-by-frequency-1587115621/1
