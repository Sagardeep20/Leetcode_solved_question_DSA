// Structure of node
/*class Node {
   public:
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};*/

class Solution {
  public:
    int count(Node* root){
        if(root == NULL){
            return 0;
        }
        int i = 1 + count(root->left)+count(root->right);
        
        return i;
    }//gives the total node
    
    bool isCBT(Node* root,int i , int count){
        if(root == NULL)return true;
        if(i >= count)return false;
        
        else{
            bool left = isCBT(root->left,2*i+1,count);
            bool right = isCBT(root->right,2*i+2,count);
            
            return (left && right);
        }
    }
    
    bool isMaxHeap(Node* root){
        if(root->left == NULL && root->right == NULL)return true;
        if(root->right == NULL){
            return (root->data > root->left->data);
        }
        else{//both nodes present
            bool left = isMaxHeap(root->left);
            bool right = isMaxHeap(root->right);
            bool leftCheck = (root->data > root->left->data);
            bool rightCheck = (root->data > root->right->data);
            return ((left && right) && (leftCheck && rightCheck));
        }
    }
    bool isHeap(Node* tree) {
        // code here
        int index = 0;
        if(isCBT(tree  , index , count(tree)) && isMaxHeap(tree)){
            return true;
        }
        else{
            return false;
        }
        
    }
};
