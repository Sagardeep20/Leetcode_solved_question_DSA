class Solution {
public:
    void fNqueen(int col,vector<string>& board,vector<vector<string>> &ans , 
        int n,vector<int>leftRow , vector<int>& lowerDiagonal,
        vector<int>&upperDiagonal){
            if(col == n){
                ans.push_back(board);
                return;
            }

            for(int row=0;row<n;row++){
                if(leftRow[row] == 0 && lowerDiagonal[row+col] == 0 && upperDiagonal[n-1 + col-row]==0){
                    board[row][col] = 'Q';

                    leftRow[row] = 1;
                    lowerDiagonal[row+col] = 1;
                    upperDiagonal[n-1 + col-row] = 1;
                    fNqueen(col+1 , board , ans , n , leftRow , lowerDiagonal , upperDiagonal);

                    board[row][col] = '.';
                    leftRow[row] = 0;
                    lowerDiagonal[row+col] = 0;
                    upperDiagonal[n-1 + col - row] = 0;

                }
            }

    }
    vector<vector<string>> solveNQueens(int n) {
        
        string s(n,'.');
        vector<string> board(n);
        vector<vector<string>> ans;
        for(int i=0;i<n;i++){
            board[i] = s;
        }

        vector<int>leftRow(n,0);
        vector<int>lowerDiagonal(2*n-1 , 0);
        vector<int> upperDiagonal(2*n-1 , 0);

        fNqueen(0,board,ans,n,leftRow,lowerDiagonal,upperDiagonal);
        return ans;


    }
};
