class Solution {
public:
    void findCombination(int idx , int target , int n , vector<int> &ds ,vector<vector<int>> &ans , vector<int>& candidates){
        if(idx == n){
            if(target == 0){
                ans.push_back(ds);
            }
            return ;
        }

        
        if(candidates[idx] <= target){
            ds.push_back(candidates[idx]);
            findCombination(idx , target-candidates[idx] , n , ds , ans , candidates);
            ds.pop_back();
        }

        findCombination(idx+1 , target , n , ds ,ans ,candidates);
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> ds;
        int n = candidates.size();

        findCombination(0,target,n,ds,ans,candidates);
        return ans;
    }
};

//TC-o(N*2^T)
//sc-0(T)
