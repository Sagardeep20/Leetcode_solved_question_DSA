class Solution {
public:
    bool isSafe(int row,int col,vector<string> &board , int n){
        int dupRow = row;
        int dupCol = col;

        while(row>=0 && col>=0){
            if(board[row][col] == 'Q')return false;
            row--;
            col--;
        }

        row = dupRow;
        col = dupCol;

        while(col >= 0){
            if(board[row][col] == 'Q')return false;
            col--;
        }

        row = dupRow;
        col = dupCol;

        while(row<n && col>=0){
            if(board[row][col] == 'Q'){
                return false;
            }

            row++;
            col--;
        }
        return true;
    }
    void fNqueen(int col , vector<string> &board , vector<vector<string>> &ans , int n){
        if(col == n){
            ans.push_back(board);
            return ;
        }   

        for(int row=0;row<n;row++){
            if(isSafe(row , col , board , n)){
                board[row][col] = 'Q';
                fNqueen(col+1 , board , ans , n);
                board[row][col] = '.';
            }
            
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        string  s(n,'.');
        vector<string> board(n);
        for(int i=0;i<n;i++){
            board[i] = s;
        }

        fNqueen(0 , board , ans , n);
        return ans;
    }
};
TC - 0(N!)
Sc-o(N^2)
