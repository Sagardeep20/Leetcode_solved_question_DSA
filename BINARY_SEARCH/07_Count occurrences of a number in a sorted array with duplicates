class Solution {
  public:
    int firstOcc(vector<int>& nums,int target){
        int n = nums.size();
        int first = -1;
        int s = 0,h=n-1;

        while(s <= h){
            int mid = s + (h-s)/2;
            if(nums[mid] == target){
                first = mid;
                h = mid-1;
            }else if(nums[mid] < target){
                s = mid+1;
            }else{
                h = mid-1;
            }
        }
        return first;
    }
    int lastOcc(vector<int>& arr,int target){
        int n = arr.size();
        int last = -1;
        int s = 0,h=n-1;

        while(s<=h){
            int mid = s + (h-s)/2;
            if(arr[mid] == target){
                last = mid;
                s = mid+1;
            }else if(arr[mid] < target){
                s = mid+1;
            }else{
                h = mid-1;
            }
        }
        return last;
    }
    int countFreq(vector<int>& arr, int target) {
        // code 
        int x =firstOcc(arr,target);
        int y =lastOcc(arr,target);
        
        int len;
        if(x == -1 && y ==-1)return 0;
        else{
            len = y-x +1;
        }
        return len;
    }
};
GFG - https://www.geeksforgeeks.org/problems/number-of-occurrence2259/1
