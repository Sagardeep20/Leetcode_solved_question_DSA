
    TreeNode* buildT(vector<int>& preorder , int preStart , int preEnd , vector<int>& inorder , int inStart , int inEnd , unordered_map<int,int>& mpp){

        if(preStart > preEnd || inStart>inEnd)return NULL;
        TreeNode* root = new TreeNode(preorder[preStart]);
        int inRoot = mpp[root->val];
        int numsLeft = inRoot-inStart;

        root->left = buildT(preorder , preStart+1 , preStart+numsLeft , inorder , inStart , inRoot-1 , mpp);
        root->right = buildT(preorder , preStart+1+numsLeft , preEnd , inorder , inRoot+1 , inEnd , mpp);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unorderd_map<int,int> mpp;
        for(int i=0;i<inorder.size();i++){
            mpp[inorder[i]]= i;
        }

        TreeNode* root = buildT(preorder,0,preorder.size()-1 , inorder,0,inorder.size()-1 , mpp);
        return root;
    }


TC - o(n*1)
sc-o(n + h)
