TreeNode* buildT(vector<int>& inorder,int inStart,int inEnd , vector<int>& postorder,int postStart,int postEnd,unordered_map<int,int>& mpp){
        if(inStart > inEnd || postStart > postEnd)return NULL;
        TreeNode* root = new TreeNode(postorder[postEnd]);
        int inRoot = mpp[root->val];
        int numsLeft = inRoot-inStart;

        root->left = buildT(inorder,inStart,inRoot-1, postorder,postStart,postStart+numsLeft-1, mpp);
        root->right = buildT(inorder,inRoot+1,inEnd, postorder ,postStart+numsLeft,postEnd-1, mpp);

        return root;

    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int,int> mpp;
        for(int i=0;i<inorder.size();i++){
            mpp[inorder[i]] = i;
        }

        TreeNode* root = buildT(inorder,0,inorder.size()-1 , postorder,0,postorder.size()-1 ,mpp);
        return root;

    }
